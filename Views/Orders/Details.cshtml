@model food_takeout.Models.Order
@using food_takeout.Models

@{
    ViewBag.Title = "订单详情";
}

<div class="container">
    <div class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom">
        <h2><i class="bi bi-receipt"></i> 订单详情</h2>
        <div>
            <span id="orderNumber" class="badge bg-secondary fs-6">订单号: @Model.OrderNumber</span>
        </div>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row">
        <div class="col-md-8">
            <div class="card mb-4">
                <div class="card-header bg-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">订单信息</h5>
                    @{
                        string statusClass = "";
                        string statusIcon = "";
                        string statusText = "";
                        
                        switch (Model.Status)
                        {
                            case food_takeout.Models.OrderStatus.Pending:
                                statusClass = "bg-warning text-dark";
                                statusIcon = "hourglass-split";
                                statusText = "待处理";
                                break;
                            case food_takeout.Models.OrderStatus.Preparing:
                                statusClass = "bg-info text-white";
                                statusIcon = "gear";
                                statusText = "制作中";
                                break;
                            case food_takeout.Models.OrderStatus.ReadyForDelivery:
                                statusClass = "bg-primary";
                                statusIcon = "box-seam";
                                statusText = "待配送";
                                break;
                            case food_takeout.Models.OrderStatus.InDelivery:
                                statusClass = "bg-info";
                                statusIcon = "bicycle";
                                statusText = "配送中";
                                break;
                            case food_takeout.Models.OrderStatus.Delivered:
                                statusClass = "bg-success";
                                statusIcon = "check-circle";
                                statusText = "已完成";
                                break;
                            case food_takeout.Models.OrderStatus.Cancelled:
                                statusClass = "bg-danger";
                                statusIcon = "x-circle";
                                statusText = "已取消";
                                break;
                        }
                    }
                    <span id="orderStatus" class="badge @statusClass" data-status="@Model.Status">
                        <i class="bi bi-@statusIcon me-1"></i> @Model.Status.GetDisplayName()
                    </span>
                </div>
                <div class="card-body">
                    <div class="row mb-4">
                        <div class="col-md-6">
                            <h6 class="text-muted mb-3">订单基本信息</h6>
                            <p class="mb-1"><strong>订单编号：</strong>@Model.OrderNumber</p>
                            <p class="mb-1"><strong>下单时间：</strong>@Model.CreatedAt.ToString("yyyy-MM-dd HH:mm:ss")</p>
                            @if (Model.UpdatedAt.HasValue)
                            {
                                <p class="mb-1"><strong>最后更新：</strong>@Model.UpdatedAt.Value.ToString("yyyy-MM-dd HH:mm:ss")</p>
                            }
                            <p class="mb-1"><strong>总金额：</strong><span class="text-danger fw-bold">¥@Model.TotalAmount.ToString("F2")</span></p>
                            @if (!string.IsNullOrEmpty(Model.Remark))
                            {
                                <p class="mb-1"><strong>备注：</strong>@Model.Remark</p>
                            }
                        </div>
                        <div class="col-md-6">
                            <h6 class="text-muted mb-3">配送信息</h6>
                            <p class="mb-1"><strong>配送地址：</strong>@Model.DeliveryAddress</p>
                            @if (Model.EstimatedDeliveryTime.HasValue)
                            {
                                <p class="mb-1"><strong>预计送达：</strong>@Model.EstimatedDeliveryTime.Value.ToString("yyyy-MM-dd HH:mm")</p>
                            }
                            @if (Model.ActualDeliveryTime.HasValue)
                            {
                                <p class="mb-1"><strong>实际送达：</strong>@Model.ActualDeliveryTime.Value.ToString("yyyy-MM-dd HH:mm")</p>
                            }
                            @if (Model.Rider != null)
                            {
                                <p class="mb-1"><strong>配送骑手：</strong>@Model.Rider.Name (@Model.Rider.PhoneNumber)</p>
                            }
                            else
                            {
                                <p class="mb-1"><strong>配送骑手：</strong>未分配</p>
                            }
                        </div>
                    </div>
                    
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <h6 class="text-muted mb-3">顾客信息</h6>
                            <p class="mb-1"><strong>顾客：</strong>@Model.Customer.Username</p>
                            @if (!string.IsNullOrEmpty(Model.Customer.PhoneNumber))
                            {
                                <p class="mb-1"><strong>联系电话：</strong>@Model.Customer.PhoneNumber</p>
                            }
                        </div>
                        <div class="col-md-6">
                            <h6 class="text-muted mb-3">餐厅信息</h6>
                            <p class="mb-1"><strong>餐厅：</strong>@Model.Restaurant.Name</p>
                            @if (!string.IsNullOrEmpty(Model.Restaurant.PhoneNumber))
                            {
                                <p class="mb-1"><strong>联系电话：</strong>@Model.Restaurant.PhoneNumber</p>
                            }
                        </div>
                    </div>
                    
                    <div class="mt-4">
                        @if (Session["UserType"] != null)
                        {
                            string userType = Session["UserType"] as string;
                            
                            if (userType == food_takeout.Models.UserTypes.Customer && Model.Status == food_takeout.Models.OrderStatus.Pending)
                            {
                                using (Html.BeginForm("Cancel", "Orders", new { id = Model.OrderId }, FormMethod.Post, new { style = "display:inline" }))
                                {
                                    @Html.AntiForgeryToken()
                                    <button type="submit" class="btn btn-danger" onclick="return confirm('确定要取消此订单吗？');">
                                        <i class="bi bi-x-circle"></i> 取消订单
                                    </button>
                                }
                            }
                            else if (userType == food_takeout.Models.UserTypes.Customer && Model.Status == food_takeout.Models.OrderStatus.Delivered)
                            {
                                // 检查订单是否已经评价
                                bool hasReview = ViewBag.HasReview != null && ViewBag.HasReview;
                                
                                if (!hasReview)
                                {
                                    <a href="@Url.Action("Review", "Orders", new { id = Model.OrderId })" class="btn btn-success">
                                        <i class="bi bi-star"></i> 评价订单
                                    </a>
                                }
                            }
                            else if (userType == food_takeout.Models.UserTypes.Merchant)
                            {
                                if (Model.Status == food_takeout.Models.OrderStatus.Pending)
                                {
                                    using (Html.BeginForm("AcceptOrder", "Orders", new { id = Model.OrderId }, FormMethod.Post, new { style = "display:inline; margin-right: 10px;" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-success">
                                            <i class="bi bi-check-lg"></i> 接受订单
                                        </button>
                                    }
                                    
                                    using (Html.BeginForm("RejectOrder", "Orders", new { id = Model.OrderId }, FormMethod.Post, new { style = "display:inline" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-danger">
                                            <i class="bi bi-x-lg"></i> 拒绝订单
                                        </button>
                                    }
                                }
                                else if (Model.Status == food_takeout.Models.OrderStatus.Preparing)
                                {
                                    using (Html.BeginForm("MarkAsReady", "Orders", new { id = Model.OrderId }, FormMethod.Post, new { style = "display:inline" }))
                                    {
                                        @Html.AntiForgeryToken()
                                        <button type="submit" class="btn btn-primary">
                                            <i class="bi bi-box-seam"></i> 标记已出餐
                                        </button>
                                    }
                                }
                            }
                            
                            if (userType == food_takeout.Models.UserTypes.Customer)
                            {
                                <a href="@Url.Action("MyOrders", "Orders")" class="btn btn-secondary ms-2">
                                    <i class="bi bi-arrow-left"></i> 返回我的订单
                                </a>
                            }
                            else if (userType == food_takeout.Models.UserTypes.Merchant)
                            {
                                <a href="@Url.Action("MerchantOrders", "Orders")" class="btn btn-secondary ms-2">
                                    <i class="bi bi-arrow-left"></i> 返回订单管理
                                </a>
                            }
                            else if (userType == food_takeout.Models.UserTypes.Rider)
                            {
                                <a href="@Url.Action("RiderOrders", "Orders")" class="btn btn-secondary ms-2">
                                    <i class="bi bi-arrow-left"></i> 返回配送订单
                                </a>
                            }
                        }
                    </div>
                </div>
            </div>
            
            <div class="card">
                <div class="card-header bg-white">
                    <h5 class="mb-0">订单明细</h5>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table mb-0">
                            <thead class="table-light">
                                <tr>
                                    <th>菜品</th>
                                    <th class="text-center">单价</th>
                                    <th class="text-center">数量</th>
                                    <th class="text-end">小计</th>
                                </tr>
                            </thead>
                            <tbody>
                                @{
                                    decimal total = 0;
                                }
                                
                                @foreach (var detail in Model.OrderDetails)
                                {
                                    decimal subtotal = detail.Price * detail.Quantity;
                                    total += subtotal;
                                    
                                    <tr>
                                        <td>@detail.Dish.Name</td>
                                        <td class="text-center">¥@detail.Price.ToString("F2")</td>
                                        <td class="text-center">@detail.Quantity</td>
                                        <td class="text-end">¥@subtotal.ToString("F2")</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot class="table-light">
                                <tr>
                                    <td colspan="3" class="text-end"><strong>小计：</strong></td>
                                    <td class="text-end">¥@total.ToString("F2")</td>
                                </tr>
                                <tr>
                                    <td colspan="3" class="text-end"><strong>配送费：</strong></td>
                                    <td class="text-end">¥@Model.DeliveryFee.ToString("F2")</td>
                                </tr>
                                <tr>
                                    <td colspan="3" class="text-end"><strong>总计：</strong></td>
                                    <td class="text-end text-danger fw-bold">¥@Model.TotalAmount.ToString("F2")</td>
                                </tr>
                            </tfoot>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-md-4">
            <!-- 订单状态时间线 -->
            <div class="card mb-4">
                <div class="card-header bg-white">
                    <h5 class="mb-0">订单进度</h5>
                </div>
                <div class="card-body">
                    <div class="timeline">
                        <div class="timeline-item">
                            <div class="timeline-marker completed">
                                <i class="bi bi-check"></i>
                            </div>
                            <div class="timeline-content">
                                <h6 class="mb-0">订单已提交</h6>
                                <p class="text-muted small mb-0">@Model.CreatedAt.ToString("yyyy-MM-dd HH:mm")</p>
                            </div>
                        </div>
                        
                        @{ 
                            bool isPending = Model.Status == food_takeout.Models.OrderStatus.Pending;
                            bool isAccepted = Model.Status != food_takeout.Models.OrderStatus.Pending && 
                                            Model.Status != food_takeout.Models.OrderStatus.Cancelled;
                            bool isPreparing = Model.Status == food_takeout.Models.OrderStatus.Preparing ||
                                            Model.Status == food_takeout.Models.OrderStatus.ReadyForDelivery ||
                                            Model.Status == food_takeout.Models.OrderStatus.InDelivery ||
                                            Model.Status == food_takeout.Models.OrderStatus.Delivered;
                            bool isReady = Model.Status == food_takeout.Models.OrderStatus.ReadyForDelivery ||
                                        Model.Status == food_takeout.Models.OrderStatus.InDelivery ||
                                        Model.Status == food_takeout.Models.OrderStatus.Delivered;
                            bool isDelivering = Model.Status == food_takeout.Models.OrderStatus.InDelivery ||
                                            Model.Status == food_takeout.Models.OrderStatus.Delivered;
                            bool isDelivered = Model.Status == food_takeout.Models.OrderStatus.Delivered;
                        }
                        
                        <div class="timeline-item">
                            <div class="timeline-marker @(isAccepted ? "completed" : "pending")">
                                @if (isAccepted)
                                {
                                    <i class="bi bi-check"></i>
                                }
                            </div>
                            <div class="timeline-content">
                                <h6 class="mb-0">商家接单</h6>
                                <p class="text-muted small mb-0">
                                    @if (Model.AcceptedTime.HasValue)
                                    {
                                        @Model.AcceptedTime.Value.ToString("yyyy-MM-dd HH:mm")
                                    }
                                    else if (isPending)
                                    {
                                        <span>等待中</span>
                                    }
                                    else
                                    {
                                        <span>已取消</span>
                                    }
                                </p>
                            </div>
                        </div>
                        
                        <div class="timeline-item">
                            <div class="timeline-marker @(isPreparing ? "completed" : "pending")">
                                @if (isPreparing)
                                {
                                    <i class="bi bi-check"></i>
                                }
                            </div>
                            <div class="timeline-content">
                                <h6 class="mb-0">制作中</h6>
                                <p class="text-muted small mb-0">
                                    @if (isPreparing && Model.UpdatedAt.HasValue)
                                    {
                                        @Model.UpdatedAt.Value.ToString("yyyy-MM-dd HH:mm")
                                    }
                                    else
                                    {
                                        <span>等待中</span>
                                    }
                                </p>
                            </div>
                        </div>
                        
                        <div class="timeline-item">
                            <div class="timeline-marker @(isReady ? "completed" : "pending")">
                                @if (isReady)
                                {
                                    <i class="bi bi-check"></i>
                                }
                            </div>
                            <div class="timeline-content">
                                <h6 class="mb-0">已出餐待配送</h6>
                                <p class="text-muted small mb-0">
                                    @if (isReady && Model.UpdatedAt.HasValue)
                                    {
                                        @Model.UpdatedAt.Value.ToString("yyyy-MM-dd HH:mm")
                                    }
                                    else
                                    {
                                        <span>等待中</span>
                                    }
                                </p>
                            </div>
                        </div>
                        
                        <div class="timeline-item">
                            <div class="timeline-marker @(isDelivering ? "completed" : "pending")">
                                @if (isDelivering)
                                {
                                    <i class="bi bi-check"></i>
                                }
                            </div>
                            <div class="timeline-content">
                                <h6 class="mb-0">配送中</h6>
                                <p class="text-muted small mb-0">
                                    @if (Model.DeliveryStartTime.HasValue)
                                    {
                                        @Model.DeliveryStartTime.Value.ToString("yyyy-MM-dd HH:mm")
                                    }
                                    else
                                    {
                                        <span>等待中</span>
                                    }
                                </p>
                            </div>
                        </div>
                        
                        <div class="timeline-item">
                            <div class="timeline-marker @(isDelivered ? "completed" : "pending")">
                                @if (isDelivered)
                                {
                                    <i class="bi bi-check"></i>
                                }
                            </div>
                            <div class="timeline-content">
                                <h6 class="mb-0">订单完成</h6>
                                <p class="text-muted small mb-0">
                                    @if (Model.ActualDeliveryTime.HasValue)
                                    {
                                        @Model.ActualDeliveryTime.Value.ToString("yyyy-MM-dd HH:mm")
                                    }
                                    else
                                    {
                                        <span>等待中</span>
                                    }
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            @if (ViewBag.Review != null)
            {
                var review = ViewBag.Review as food_takeout.Models.Review;
                <div class="card">
                    <div class="card-header bg-white">
                        <h5 class="mb-0">订单评价</h5>
                    </div>
                    <div class="card-body">
                        <div class="mb-3">
                            <strong>评分：</strong>
                            <div class="rating">
                                @for (int i = 1; i <= 5; i++)
                                {
                                    if (i <= review.Rating)
                                    {
                                        <i class="bi bi-star-fill text-warning"></i>
                                    }
                                    else
                                    {
                                        <i class="bi bi-star text-muted"></i>
                                    }
                                }
                                <span class="ms-2">@review.Rating/5</span>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <strong>评价内容：</strong>
                            <p class="mt-2">@review.Content</p>
                        </div>
                        
                        <div class="text-muted small">
                            <i class="bi bi-clock"></i> 评价时间：@review.CreatedAt.ToString("yyyy-MM-dd HH:mm")
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<style>
    .timeline {
        position: relative;
        padding-left: 30px;
    }
    .timeline::before {
        content: '';
        position: absolute;
        left: 10px;
        top: 0;
        height: 100%;
        width: 2px;
        background-color: #e9ecef;
    }
    .timeline-item {
        position: relative;
        margin-bottom: 20px;
    }
    .timeline-marker {
        position: absolute;
        left: -30px;
        width: 20px;
        height: 20px;
        border-radius: 50%;
        background-color: var(--secondary-color);
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 0.8rem;
    }
    .timeline-marker.completed {
        background-color: var(--success-color);
    }
    .timeline-marker.pending {
        background-color: #e9ecef;
        border: 2px solid var(--secondary-color);
    }
    .rating {
        font-size: 1.2rem;
    }
</style> 